@using NoteUI.Models
@model SaveNewNumberModel

@{
    ViewData["Title"] = "New Blog";
}

<br />

<div class="row">

    <div class="container">

        <h2>Create</h2>
        <table>

            <tr>
                <td>
                    <textarea id="file-picker">Hello, World!</textarea>
                </td>
            </tr>

            <tr>
                <td><br /><button onclick="myFunction()">Click Me!</button></td>
            </tr>
        </table>

    </div>

</div>
<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
@*<script type="text/javascript">
        $(document).ready(function () {
            val1 = "5";
            val2 = "2";

            $.ajax({
                type: "POST",
                url: "@Url.Action("Add")",
                data: {number1: val1, number2: val2},
                dataType: "text",
                success: function (msg) {
                    console.log(msg);
                },
                error: function (req, status, error) {
                    console.log(msg);
                }
            });
        });
    </script>*@

<script src="https://cdn.tiny.cloud/1/no-api-key/tinymce/5/tinymce.min.js" referrerpolicy="origin"></script>
<script type="text/javascript">

    var type = 4;

    if (type == 1) {

        tinymce.init({

            selector: 'textarea#file-picker',
            height: '500',
            width: '900',
            plugins: 'image',
            a11y_advanced_options: true
        });

    }
    else if (type == 2) {

        tinymce.init({

            selector: 'textarea#file-picker',
            plugins: 'image code',
            height: '500',
            width: '900',
            toolbar: 'undo redo | link image | code',
            /* enable title field in the Image dialog*/
            image_title: true,
            /* enable automatic uploads of images represented by blob or data URIs*/
            automatic_uploads: true,
            /*
              URL of our upload handler (for more details check: https://www.tiny.cloud/docs/configure/file-image-upload/#images_upload_url)
              images_upload_url: 'postAcceptor.php',
              here we add custom filepicker only to Image dialog
            */
            file_picker_types: 'image',
            /* and here's our custom image picker*/
            file_picker_callback: function (cb, value, meta) {
                var input = document.createElement('input');
                input.setAttribute('type', 'file');
                input.setAttribute('accept', 'image/*');

                /*
                  Note: In modern browsers input[type="file"] is functional without
                  even adding it to the DOM, but that might not be the case in some older
                  or quirky browsers like IE, so you might want to add it to the DOM
                  just in case, and visually hide it. And do not forget do remove it
                  once you do not need it anymore.
                */

                input.onchange = function () {
                    var file = this.files[0];

                    var reader = new FileReader();
                    reader.onload = function () {
                        /*
                          Note: Now we need to register the blob in TinyMCEs image blob
                          registry. In the next release this part hopefully won't be
                          necessary, as we are looking to handle it internally.
                        */
                        var id = 'blobid' + (new Date()).getTime();
                        var blobCache = tinymce.activeEditor.editorUpload.blobCache;
                        var base64 = reader.result.split(',')[1];
                        var blobInfo = blobCache.create(id, file, base64);
                        blobCache.add(blobInfo);

                        /* call the callback and populate the Title field with the file name */
                        cb(blobInfo.blobUri(), { title: file.name });
                    };
                    reader.readAsDataURL(file);
                };

                input.click();
            },
            content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }'
        });

    }
    else if (type == 3) {
        tinymce.init({
            selector: 'textarea#file-picker',
            height: 500,
            plugins: [
                'advlist autolink lists link image charmap print preview anchor',
                'searchreplace visualblocks code fullscreen',
                'insertdatetime media table paste imagetools wordcount'
            ],
            toolbar: 'insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image',
            content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }'
        });
    }
    else if (type == 4) {
        

        tinymce.init({

            selector: 'textarea#file-picker',
            menubar: false,
            plugins: 'image code',
            height: '500',
            width: '900',
            toolbar: 'bold italic underline | forecolor backcolor | style-p style-h1 style-h2 style-h3 style-pre style-code | alignleft aligncenter alignright alignjustify | undo redo | link image | code',
            /* enable title field in the Image dialog*/
            image_title: true,
            /* enable automatic uploads of images represented by blob or data URIs*/
            automatic_uploads: true,
            /*
              URL of our upload handler (for more details check: https://www.tiny.cloud/docs/configure/file-image-upload/#images_upload_url)
              images_upload_url: 'postAcceptor.php',
              here we add custom filepicker only to Image dialog
            */
            file_picker_types: 'image',
            /* and here's our custom image picker*/
            file_picker_callback: function (cb, value, meta) {
                var input = document.createElement('input');
                input.setAttribute('type', 'file');
                input.setAttribute('accept', 'image/*');

                /*
                  Note: In modern browsers input[type="file"] is functional without
                  even adding it to the DOM, but that might not be the case in some older
                  or quirky browsers like IE, so you might want to add it to the DOM
                  just in case, and visually hide it. And do not forget do remove it
                  once you do not need it anymore.
                */

                input.onchange = function () {
                    var file = this.files[0];

                    var reader = new FileReader();
                    reader.onload = function () {
                        /*
                          Note: Now we need to register the blob in TinyMCEs image blob
                          registry. In the next release this part hopefully won't be
                          necessary, as we are looking to handle it internally.
                        */
                        var id = 'blobid' + (new Date()).getTime();
                        var blobCache = tinymce.activeEditor.editorUpload.blobCache;
                        var base64 = reader.result.split(',')[1];
                        var blobInfo = blobCache.create(id, file, base64);
                        blobCache.add(blobInfo);

                        /* call the callback and populate the Title field with the file name */
                        cb(blobInfo.blobUri(), { title: file.name });
                    };
                    reader.readAsDataURL(file);
                };

                input.click();
            },
            content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }'
            
        });
    }
    
</script>

<script>
    function myFunction() {
        //alert("you click");
        var myContent = tinymce.get("file-picker").getContent();
        //alert(myContent);

        console.log(myContent.length);

        $.ajax({            
            type: "POST",
            url: "@Url.Action("AddBlogPage")",
            data: { blogDescription: myContent },
            dataType: "text",
            success: function (msg) {
                console.log(msg);
             },
             error: function (req, status, error) {
                console.log(msg);
             }
        });       
            
    }
</script>